import e, { useState as t } from "react"; import i from "react-ace"; import "ace-builds/src-noconflict/theme-monokai"; if ("production" !== process.env.NODE_ENV) { var r = require("react-is"); module.exports = require("./factoryWithTypeCheckers")(r.isElement, !0) } else module.exports = require("./factoryWithThrowingShims")(); var o = Object.freeze({ __proto__: null }); !function (e, t) { void 0 === t && (t = {}); var i = t.insertAt; if (e && "undefined" != typeof document) { var r = document.head || document.getElementsByTagName("head")[0], o = document.createElement("style"); o.type = "text/css", "top" === i && r.firstChild ? r.insertBefore(o, r.firstChild) : r.appendChild(o), o.styleSheet ? o.styleSheet.cssText = e : o.appendChild(document.createTextNode(e)) } }(":root{--timeline-bar-height:20px;--timeline-cursor-height:30px}.timeline-wrapper{margin:0 auto;position:relative;width:1100px}.timeline-bar{background-color:#a9a9a9;height:20px;position:relative}.timeline-cursor{border-radius:50%;height:30px;left:0;top:calc(var(--timeline-bar-height)/2 - var(--timeline-cursor-height)/2);width:30px}.timeline-cursor,.timeline-item{cursor:pointer;position:absolute}.timeline-item{height:100%;width:3px}.red{background-color:red}.white{background-color:#676767}.timeslot{background-color:#fff;display:none;padding:.3rem 0;position:absolute;right:-13.5px;top:-20px;width:30px;z-index:5}.timeslot p{font-size:10px;margin:0;text-align:center}.timeline-item:hover .timeslot{display:block}.copy-paste-marker{background-color:#bd2e4c5e;position:absolute}"); const { arrayOf: a, exact: n, number: l, oneOf: s, string: c } = o; window.ace.config.set("basePath", "https://cdn.jsdelivr.net/npm/ace-builds@1.4.13/src-noconflict/"); const m = ({ timelineArray: r, duration: o, language: a = "javascript" }) => { const [n, l] = t(r?.[0]); return e.createElement("div", { className: "timeline-wrapper" }, e.createElement(i, { mode: n?.lang ?? a, theme: "monokai", name: "brace-editor", style: { width: r ? "calc(100% + 3px)" : "100%" }, tabSize: 4, readOnly: !0, highlightActiveLine: !1, value: n?.code ?? "", markers: n.markers ?? [] }), e.createElement("div", { className: "timeline-bar" }, r && r.map(((t, i) => e.createElement("div", { className: "timeline-item " + ("PASTE" !== t.actionType ? "white" : "red"), key: `${t.lang}-${i}`, style: { left: t.time / o * 100 + "%" }, onClick: () => l(r[i]) }, e.createElement("div", { className: "timeslot" }, e.createElement("p", null, t.time, "s"))))))) }, d = n({ startRow: l.isRequired, endRow: l.isRequired, startCol: l.isRequired, endCol: l.isRequired, className: c.isRequired, type: s(["text", "fullLine", "screenLine"]) }), p = n({ actionType: s(["PASTE", "TEST", "TYPE"]).isRequired, code: c.isRequired, time: l.isRequired, lang: c, markers: a(d) }); m.propTypes = { timelineArray: a(p).isRequired, duration: l.isRequired, language: c }; export { m as default };
